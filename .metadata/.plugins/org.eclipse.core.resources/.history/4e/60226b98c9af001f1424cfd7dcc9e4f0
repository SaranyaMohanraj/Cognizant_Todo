package Tests;
import java.time.Duration;
import java.util.ArrayList;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.testng.Assert;
import org.testng.annotations.Test;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.aventstack.extentreports.ExtentTest;

public class TodoTests extends BaseTestClass {
    @Test  (enabled = false,priority = 2)
    public void AddTodo() throws InterruptedException
    {    	  
    	  ExtentTest test = extent.createTest("AddTodo");
    	  WebElement inputBox = driver.findElement(By.className("new-todo"));
          String todoText = "Learn Selenium";

          
          // Add a todo
          inputBox.sendKeys(todoText + "\n");        
          // Verify the todo is added
          WebElement todoItem = driver.findElement(By.xpath("//label[text()='" + todoText + "']"));
          Assert.assertTrue(todoItem.isDisplayed(), "Todo item was added successfully!");
          test.pass("Todo item was added successfully!");
          Thread.sleep(5000);

         
        
    
    }
    @Test  (enabled = false,priority = 3)
    public void MarkTodoCompleted() throws InterruptedException {
    	ExtentTest test = extent.createTest("MarkTodoCompleted");
        WebElement checkbox = driver.findElement(By.cssSelector("input.toggle"));
        checkbox.click();

        // Verify the todo is marked as completed
        WebElement completedTodo = driver.findElement(By.cssSelector("li.completed"));
        Assert.assertTrue(completedTodo.isDisplayed(), "Todo was marked as completed!");
        test.pass("Todo was not marked as completed!");   
        driver.findElement(By.linkText("Completed")).click();
        int completedCount = driver.findElements(By.cssSelector("ul.todo-list li")).size();
        Assert.assertEquals(completedCount, 1, "Completed todos filtering Passed!");
        test.pass("Completed todos filtering!");
        Thread.sleep(5000);
        
    }
    
    @Test  (enabled = false,priority = 4)
    public void testDeleteTodo() throws InterruptedException {
    	ExtentTest test = extent.createTest("DeleteTodo");
    	Actions actions = new Actions(driver);
    	WebElement inputBox = driver.findElement(By.xpath("//div[@class ='view']/label"));       
        actions.moveToElement(inputBox).perform();
        WebElement deleteButton = driver.findElement(By.cssSelector("button.destroy"));
        deleteButton.click();

        // Verify the todo is deleted
        int remainingTodos = driver.findElements(By.cssSelector("ul.todo-list li")).size();
        Assert.assertEquals(remainingTodos, 0, "Todo was deleted successfully!");
        test.pass("Todo was deleted!");
        Thread.sleep(20000);

    }
    
    
    @Test (enabled = false,priority = 5)
    public void testFilterTodos() throws InterruptedException {
    	ExtentTest test = extent.createTest("FilterTodos");
        // Add an active todo
        WebElement inputBox = driver.findElement(By.className("new-todo"));
        inputBox.sendKeys("Active Todo\n");

        // Filter Active Todos
        driver.findElement(By.linkText("Active")).click();
        int activeCount = driver.findElements(By.cssSelector("ul.todo-list li")).size();
        Assert.assertEquals(activeCount, 1, "Active todos filtering Passed!");

        // Filter Completed Todos
        driver.findElement(By.linkText("Completed")).click();
        int completedCount = driver.findElements(By.cssSelector("ul.todo-list li")).size();
        Assert.assertEquals(completedCount, 0, "Completed todos filtering Passed!");
        test.pass("Completed todos filtering!");
        Thread.sleep(10000);
      
    }
    
    @Test  (enabled = false,priority = 1)
    public void testEditTodo() throws InterruptedException {
    	ExtentTest test = extent.createTest("EditTodo");
    	 String initialTodo = "Todo1";
         String updatedTodo = "EditedTodo";
         
         // Add a new todo
         WebElement inputBox = driver.findElement(By.cssSelector("input.new-todo"));         
         inputBox.sendKeys(initialTodo + "\n");

         Thread.sleep(20000);
         // Verify the todo is added
         WebElement todoItem = driver.findElement(By.xpath("//label[text()='" + initialTodo + "']"));
         Assert.assertTrue(todoItem.isDisplayed(), "Todo item was not added successfully!");

         // Double-click to edit the todo
         Actions actions = new Actions(driver);
         actions.doubleClick(todoItem).perform();
   
         Thread.sleep(2000);
         // Find the editable input field and update the text
         WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10)); // 10 seconds timeout
         WebElement editInput = wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath("/html/body/section/main/ul/li/div/div/input")));
         actions.doubleClick(editInput).perform();
         editInput.sendKeys(Keys.BACK_SPACE);
         Thread.sleep(2000);
         editInput.sendKeys(updatedTodo);
         editInput.sendKeys(Keys.ENTER);
         Thread.sleep(2000);

         // Verify the todo text is updated
         WebElement updatedTodoItem = driver.findElement(By.xpath("//label[text()='" + updatedTodo + "']"));
         Assert.assertTrue(updatedTodoItem.isDisplayed(), "Todo item was not updated successfully!"); 
         WebElement deleteButton = driver.findElement(By.cssSelector("button.destroy"));
         deleteButton.click();
        test.pass("Test for editing todo passed!");
    }

    @Test
    public void EmptyTodoTest()
    {
    	ExtentTest test = extent.createTest("EmptyTodotest");
    	WebElement inputBox = driver.findElement(By.xpath("//input[@id = 'todo-input']"));   
    	System.out.println("GetEmpty*************"+inputBox.getAttribute("placeholder"));
    	Assert.assertEquals(inputBox.getAttribute("placeholder"), "What needs to be done?", "Todo page with emptytodo tests are tested successfully!");
    	test.pass("Test for EmptyTodotest passed!");
    	
    }
    
    @Test
    public void VerifyClearCompleted() throws InterruptedException
    {
    	ExtentTest test = extent.createTest("VerifyClearCompleted");
    	
         ArrayList items = new ArrayList();
         items.add("Todo1");
         items.add("Todo2");
         WebElement checkbox;
         WebElement inputBox;
         WebElement todoItem;
         WebElement completedTodo;
         
         for(int i=0;i<items.size();i++)
         {        	 
        
         // Add a new todo
         inputBox = driver.findElement(By.cssSelector("input.new-todo"));         
         inputBox.sendKeys(item1 + "\n");

         Thread.sleep(20000);
         // Verify the todo is added
         todoItem = driver.findElement(By.xpath("//label[text()='" + item1 + "']"));
         Assert.assertTrue(todoItem.isDisplayed(), "Todo item was not added successfully!");

    	checkbox = driver.findElement(By.cssSelector("input.toggle"));
        checkbox.click();

        // Verify the todo is marked as completed
        completedTodo = driver.findElement(By.cssSelector("li.completed"));
        Assert.assertTrue(completedTodo.isDisplayed(), "Todo was marked as completed!");
        test.pass("Todo was not marked as completed!"); 
         }
        
        
        driver.findElement(By.linkText("Completed")).click();
        int completedCount = driver.findElements(By.cssSelector("ul.todo-list li")).size();
        Assert.assertEquals(completedCount, 1, "Completed todos filtering Passed!");
        test.pass("Completed todos filtering!");
        Thread.sleep(5000);
    	
    }
}
		